//
// Created by Fir on 2024/3/7 007.
//

// todo warning flash used age >= 90.93%, will be damaged soon

#include <vector>
#include "astra_rocket.h"
#include "astra_logo.h"
#include "ui/item/page/page.h"

std::vector<uint8_t> pic_test = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xF1, 0x3F,
    0xFF, 0xFF, 0xC3, 0x3F, 0xFF, 0xFF, 0x87, 0x3F, 0xFF, 0xFF, 0x07, 0x3F, 0xFF, 0xFF, 0x0F, 0x3E,
    0xFF, 0xFF, 0x0F, 0x3E, 0xFF, 0xFF, 0x0F, 0x3C, 0xFF, 0xFF, 0x0F, 0x3C, 0xFF, 0xFF, 0x0F, 0x38,
    0xFF, 0xFF, 0x0F, 0x38, 0xFF, 0xFF, 0x0F, 0x38, 0xFF, 0xFF, 0x07, 0x38, 0xFF, 0xFF, 0x07, 0x38,
    0xFF, 0xFF, 0x03, 0x38, 0xF7, 0xFF, 0x01, 0x38, 0xE7, 0xFF, 0x00, 0x3C, 0x87, 0x3F, 0x00, 0x3C,
    0x0F, 0x00, 0x00, 0x3E, 0x0F, 0x00, 0x00, 0x3E, 0x1F, 0x00, 0x00, 0x3F, 0x3F, 0x00, 0x80, 0x3F,
    0x7F, 0x00, 0xC0, 0x3F, 0xFF, 0x01, 0xF0, 0x3F, 0xFF, 0x07, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F};

std::vector<uint8_t> pic_0 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xCF, 0x7F, 0xFF, 0x39,
    0xCF, 0x3F, 0xFE, 0x3D, 0xDF, 0xBF, 0xFE, 0x3C, 0xDF, 0xBF, 0xFE, 0x3C, 0x9F, 0xDF, 0xFE, 0x3E,
    0x9F, 0xDF, 0xFC, 0x3E, 0xBF, 0xDF, 0x7D, 0x3E, 0xBF, 0xDF, 0x7D, 0x3E, 0x3F, 0xEF, 0x7D, 0x3F,
    0x7F, 0xEF, 0x7B, 0x3F, 0x7F, 0xEF, 0x3B, 0x3F, 0x7F, 0xE6, 0xBB, 0x3F, 0x7F, 0xF6, 0xB3, 0x3F,
    0xFF, 0xF6, 0xB7, 0x3F, 0xFF, 0xF6, 0x97, 0x3F, 0xFF, 0xFA, 0xC7, 0x3F, 0xFF, 0xF9, 0xC7, 0x3F,
    0xFF, 0xF9, 0xCF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F};

std::vector<uint8_t> pic_1 = {
    0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
    0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xcf, 0xff, 0x3f,
    0xff, 0xc3, 0xff, 0x3f, 0xff, 0xd9, 0xff, 0x3f, 0xff, 0xdc, 0xff, 0x3f, 0x7f, 0xde, 0xff, 0x3f,
    0x9f, 0x1f, 0x00, 0x38, 0xcf, 0xff, 0xff, 0x33, 0xe7, 0xff, 0xff, 0x33, 0xe7, 0xff, 0xff, 0x33,
    0xcf, 0xff, 0xff, 0x33, 0x9f, 0x1f, 0x00, 0x38, 0x7f, 0xde, 0xff, 0x3f, 0xff, 0xdc, 0xff, 0x3f,
    0xff, 0xd9, 0xff, 0x3f, 0xff, 0xc3, 0xff, 0x3f, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
    0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f,
    0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x3f};

std::vector<uint8_t> pic_2 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xEF, 0xFF, 0xFF, 0x3F, 0xC7, 0xFF, 0xFF, 0x3F,
    0xC7, 0xF3, 0xFF, 0x3F, 0x83, 0xC0, 0xFF, 0x3F, 0xEF, 0xCC, 0xFF, 0x3F, 0x6F, 0x9E, 0xFF, 0x3F,
    0x6F, 0x9E, 0xFF, 0x3F, 0x2F, 0x3F, 0xFF, 0x3F, 0x2F, 0x3F, 0xFF, 0x3F, 0x8F, 0x7F, 0xFE, 0x3F,
    0x8F, 0x7F, 0xFE, 0x39, 0x8F, 0x7F, 0xFE, 0x39, 0xCF, 0xFF, 0xFC, 0x3C, 0xCF, 0xFF, 0xFC, 0x3C,
    0xEF, 0xFF, 0xFC, 0x3C, 0xEF, 0xFF, 0x79, 0x3E, 0xEF, 0xFF, 0x79, 0x3E, 0xEF, 0xFF, 0x33, 0x3F,
    0xEF, 0xFF, 0x33, 0x3F, 0xEF, 0xFF, 0x87, 0x3F, 0xEF, 0xFF, 0xCF, 0x3F, 0xEF, 0xFF, 0x7F, 0x3E,
    0xEF, 0xFF, 0x7F, 0x38, 0x0F, 0x00, 0x00, 0x30, 0xFF, 0xFF, 0x7F, 0x38, 0xFF, 0xFF, 0x7F, 0x3E,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F};

std::vector<uint8_t> pic_3 = {
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F, 0x7F, 0x00, 0x80, 0x3F,
    0x3F, 0x00, 0x00, 0x3F, 0x3F, 0xE0, 0x01, 0x3F, 0x7F, 0xF8, 0x87, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F,
    0x3F, 0xFC, 0x0F, 0x3F, 0x0F, 0x3E, 0x1F, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C, 0x0F, 0x1E, 0x1E, 0x3C,
    0x0F, 0x3E, 0x1F, 0x3C, 0x3F, 0xFC, 0x0F, 0x3F, 0x7F, 0xFC, 0x8F, 0x3F, 0x7F, 0xF8, 0x87, 0x3F,
    0x3F, 0xE0, 0x01, 0x3F, 0x3F, 0x00, 0x00, 0x3F, 0x7F, 0x00, 0x80, 0x3F, 0xFF, 0x0C, 0xCC, 0x3F,
    0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0x1F, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F,
    0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x3F};

std::vector<std::string> labels = {"前方", "后方", "左方", "右方"};

auto *astraLauncher = new astra::Launcher();
auto *rootPage = new yomu::GammaDashboard(labels);
auto *secondPage = new yomu::GammaDashboard(labels, 1);
auto *thirdPage = new yomu::PDXDashboard(labels);
auto *treeRootPage = new astra::Tile("树形根目录");
auto *thresholdSettingsPage = new astra::List("设置阈值", pic_test, astra::List::ItemAction::EnterSubpage);
auto *clearCumulativeDosePage = new astra::List("清空累计剂量", pic_3, astra::List::ItemAction::ShowPopup);

void astraCoreInit(void)
{
  HAL::inject(new HALDreamCore);
  HAL::delay(150);
  // astra::drawSTART(50);
  HAL::setFont(astra::getUIConfig().mainFont);

  // 添加环形界面
  rootPage->addMenu(secondPage);
  secondPage->addMenu(thirdPage);
  thirdPage->addMenu(rootPage);

  // 环形界面与树形界面的链接(这里的添加顺序反过来是因为addItem有添加父界面指针的操作)
  thirdPage->addItem(treeRootPage);
  secondPage->addItem(treeRootPage);
  rootPage->addItem(treeRootPage);

  // 添加树形界面
  treeRootPage->addItem(thresholdSettingsPage);
  treeRootPage->addItem(clearCumulativeDosePage);
  // 树形界面：阈值设置
  thresholdSettingsPage->addItem(new yomu::NumberEditor("探头1", "10000", "μSv/h"));
  thresholdSettingsPage->addItem(new yomu::NumberEditor("探头2", "20000", "μSv/h"));
  thresholdSettingsPage->addItem(new yomu::NumberEditor("探头3", "30000", "μSv/h"));
  thresholdSettingsPage->addItem(new yomu::NumberEditor("探头4", "40000", "μSv/h"));
  // 树形界面：清空累计剂量
  clearCumulativeDosePage->addItem(new astra::Divider("探头1"));
  clearCumulativeDosePage->addItem(new astra::Divider("探头2"));
  clearCumulativeDosePage->addItem(new astra::Divider("探头3"));
  clearCumulativeDosePage->addItem(new astra::Divider("探头4"));

  astraLauncher->init(rootPage);
}

void astraCoreStart(void)
{
  for (;;)
  {
    astraLauncher->update();
    vTaskDelay(5 / portTICK_PERIOD_MS);
  }
}

void astraCoreDestroy(void)
{
  HAL::destroy();
  delete astraLauncher;
}
